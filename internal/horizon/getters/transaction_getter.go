// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package getters

import (

	"github.com/tokend/stellar-deposit-svc/internal/horizon"
	"github.com/tokend/stellar-deposit-svc/internal/horizon/query"
	logan "gitlab.com/distributed_lab/logan/v3"
	"gitlab.com/distributed_lab/logan/v3/errors"
	regources "gitlab.com/tokend/regources/generated"
)

type TransactionGetter struct {
	horizon.Interface
}

func (g *TransactionGetter) TransactionByID(ID string, params query.TransactionParams) (*regources.TransactionResponse, error) {
	result := &regources.TransactionResponse{}
	err := g.GetSingle(query.TransactionByID(ID), params, result)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get record by id", logan.F{
			"id": ID,
		})
	}

	return result, nil
}

func (g *TransactionGetter) TransactionList(params query.Params) (*regources.TransactionListResponse, error) {
	result := &regources.TransactionListResponse{}
	err := g.GetList(query.TransactionList(), params, result)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get records list", logan.F{
			"query_params": params,
		})
	}

	return result, nil
}

func (g *TransactionGetter) Next(links *regources.Links) (*regources.TransactionListResponse, error) {
	if links == nil {
		return nil, errors.New("Empty links")
	}
	result := &regources.TransactionListResponse{}
	err := g.PageFromLink(links.Next, result)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get next page", logan.F{
			"link": links.Next,
		})
	}

	return result, nil
}
